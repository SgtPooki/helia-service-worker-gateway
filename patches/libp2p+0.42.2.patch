diff --git a/node_modules/libp2p/dist/src/content-routing/utils.js b/node_modules/libp2p/dist/src/content-routing/utils.js
index d63d670..c057e20 100644
--- a/node_modules/libp2p/dist/src/content-routing/utils.js
+++ b/node_modules/libp2p/dist/src/content-routing/utils.js
@@ -18,6 +18,7 @@ export function uniquePeers(source) {
     /** @type Set<string> */
     const seen = new Set();
     return filter(source, (peer) => {
+      console.log(`uniquePeers peer: `, peer);
         // dedupe by peer id
         if (seen.has(peer.id.toString())) {
             return false;
@@ -30,13 +31,15 @@ export function uniquePeers(source) {
  * Require at least `min` peers to be yielded from `source`
  */
 export async function* requirePeers(source, min = 1) {
+  console.log(`source: `, source);
     let seen = 0;
     for await (const peer of source) {
         seen++;
+        console.log(`peer: `, peer);
         yield peer;
     }
     if (seen < min) {
-        throw errCode(new Error('not found'), 'NOT_FOUND');
+        throw errCode(new Error(`requirePeers failed with ${seen} of ${min} required peers.`), 'NOT_FOUND');
     }
 }
 //# sourceMappingURL=utils.js.map
diff --git a/node_modules/libp2p/dist/src/peer-routing.js b/node_modules/libp2p/dist/src/peer-routing.js
index 2f89626..d56277b 100644
--- a/node_modules/libp2p/dist/src/peer-routing.js
+++ b/node_modules/libp2p/dist/src/peer-routing.js
@@ -55,7 +55,7 @@ export class DefaultPeerRouting {
             await drain(this.getClosestPeers(this.components.peerId.toBytes(), { signal: this.abortController.signal }));
         }
         catch (err) {
-            log.error(err);
+            log.error('_findClosestPeersTask:', err);
         }
         finally {
             this.abortController?.clear();
@@ -86,7 +86,7 @@ export class DefaultPeerRouting {
                 yield await router.findPeer(id, options);
             }
             catch (err) {
-                log.error(err);
+                log.error('findPeer: ', err);
             }
         })())), (source) => filter(source, Boolean), (source) => storeAddresses(source, this.components.peerStore), async (source) => await first(source));
         if (output != null) {
@@ -101,7 +101,8 @@ export class DefaultPeerRouting {
         if (this.routers.length === 0) {
             throw errCode(new Error('No peer routers available'), codes.ERR_NO_ROUTERS_AVAILABLE);
         }
-        yield* pipe(merge(...this.routers.map(router => router.getClosestPeers(key, options))), (source) => storeAddresses(source, this.components.peerStore), (source) => uniquePeers(source), (source) => requirePeers(source));
+        const source = merge(...this.routers.map(router => router.getClosestPeers(key, options)))
+        yield* pipe(source, (source) => storeAddresses(source, this.components.peerStore), (source) => uniquePeers(source), (source) => requirePeers(source));
     }
 }
 //# sourceMappingURL=peer-routing.js.map
diff --git a/node_modules/libp2p/src/content-routing/utils.ts b/node_modules/libp2p/src/content-routing/utils.ts
index bc6fa84..8d79ce6 100644
--- a/node_modules/libp2p/src/content-routing/utils.ts
+++ b/node_modules/libp2p/src/content-routing/utils.ts
@@ -41,6 +41,7 @@ export function uniquePeers (source: Source<PeerInfo>) {
  */
 export async function * requirePeers (source: Source<PeerInfo>, min: number = 1) {
   let seen = 0
+  console.log(`source: `, source);
 
   for await (const peer of source) {
     seen++
